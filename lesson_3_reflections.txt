When would you want to create a remote repository rather than keeping all your work local?

When collaborating, or using multiple platforms, it is an excellent way of accessing common information remotely.
It is also an advantage to keep units under production in the cloud since the storage is (hopefully) more reliable, scalable, 
secure and robust.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

There might be inconveniences with testing new code that is collaborately worked upon if it is constantly being pulled (with changes) to my local repository. It might be good to be able to see which changes are made to the remote before pulling them (the commits).

Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork works more or less like a clone, but on GitHub. A fork is usable for suggesting and making changes to other individuals work but without changing their repositories (which you might not have permission to do anyway). Forking makes a clone of a remote on GitHub and can be used to preserve the original. By cloning, you can create a local copy of a remote, and then use the remote to store updates (commits) which multiple users/devices can access. A branch is just a chain of commits, where each commit points to its parent(s). The remotes store commits (as branches).

What is the benefit of having a copy of the last known state of the remote stored locally?

It is possible to work offline, to know the remote's state at a moment in time and working with merging them (without internet access). Later on when you have internet access, you can fetch the new state of the remote. This approach will possibly reduce the amount of conflicts since you were able to solve some of them offline.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Store history manually (if at all), and compare different updates manually. It would take a lot more of time to do everything manually, and if you skip doing version control, you will risk being less creative and risk breaking working functionality. The only easier thing with leaving out the usage of Git and GitHub is that learning how to use the git system (which can be a bit complicated) can be ignored.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

When collaborating, it is probably not a good idea to push changes directly into master before letting your collaborators have a look at the resulting changes. The loss though is some struggle in having to merge to local master, then merge into your specific branch that you want to make a pull request from into master, and then letting people "approve" your pull request into master.